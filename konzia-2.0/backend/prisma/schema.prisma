// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shoppingLists ShoppingList[]
  budgetItems   BudgetItem[]
  recipes       Recipe[]
  notifications Notification[]

  @@map("users")
}

model ShoppingList {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items ShoppingItem[]

  @@map("shopping_lists")
}

model ShoppingItem {
  id          String   @id @default(cuid())
  name        String
  category    String
  quantity    Int
  unit        String
  price       Float?
  isCompleted Boolean  @default(false)
  priority    Priority @default(MEDIUM)
  notes       String?
  completedAt DateTime?
  listId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  list ShoppingList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@map("shopping_items")
}

model BudgetItem {
  id        String   @id @default(cuid())
  name      String
  limit     Float
  spent     Float    @default(0)
  color     String   @default("#006400")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budget_items")
}

model Recipe {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String?
  prepTime    Int
  cookTime    Int
  servings    Int
  difficulty  Difficulty @default(EASY)
  rating      Float    @default(0)
  tags        String[]
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  ingredients RecipeIngredient[]

  @@map("recipes")
}

model RecipeIngredient {
  id       String  @id @default(cuid())
  name     String
  amount   Float
  unit     String
  notes    String?
  recipeId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("recipe_ingredients")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SpendingRecord {
  id        String   @id @default(cuid())
  amount    Float
  category  String
  itemName  String?
  userId    String
  createdAt DateTime @default(now())

  @@map("spending_records")
}

// Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum NotificationType {
  BUDGET_ALERT
  PRICE_DROP
  EXPIRY_REMINDER
  WEEKLY_REPORT
  GENERAL
}
